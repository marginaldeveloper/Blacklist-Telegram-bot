TOKEN = "#" #–ö–æ–≥–¥–∞-—Ç–æ –¥–∞–≤–Ω–æ, –∫–æ–≥–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –µ—â—ë –ø–∏—Å–∞–ª–∏ –∫–æ–¥ –Ω–∞ –∫–∞–º–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—á–∫–∞—Ö,
#–∞ –±–∞–≥–∏ –∏—Å–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∏—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–ª—è—Å–∫–∞–º–∏, –ø–æ—è–≤–∏–ª—Å—è –ü–µ—Ä–≤—ã–π API-–¢–æ–∫–µ–Ω.


OWNER_ID = # # –ù–æ –æ–¥–Ω–∞–∂–¥—ã –ø–æ—è–≤–∏–ª—Å—è –û–Ω ‚Äî –ü–µ—Ä–≤—ã–π –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. 
# –ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —Ä–æ–¥–∏–ª—Å—è –æ–Ω —Å—Ä–∞–∑—É —Å /ban –≤ —Ä—É–∫–∞—Ö, –∞ –µ–≥–æ –ø–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–º –±—ã–ª–æ "–í—ã –Ω–µ –∞–¥–º–∏–Ω."




# —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã"
projects = {
    "Test 1": "https://marginaldeveloper.github.io/Cyb3rR4tWebsite/",
    "–ü—Ä–æ–µ–∫—Ç 2": "https://example.com/project2",
    "–ü—Ä–æ–µ–∫—Ç 3": "https://example.com/project3"
}




from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        description TEXT,
        documents TEXT,
        photo TEXT       
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS botusers (
        tg_id INTEGER PRIMARY KEY,
        username TEXT,
        role TEXT
    )
''')
conn.commit()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS admins (
        tg_id INTEGER PRIMARY KEY,
        name TEXT
    )
''')

def get_user_role(user_id):
    if user_id == OWNER_ID:
        return "–ì–ª. –∞–¥–º–∏–Ω"
    elif is_admin(user_id):
        return "–ú–µ–Ω–µ–¥–∂–µ—Ä"
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"


cursor.execute("INSERT OR IGNORE INTO admins (tg_id, name) VALUES (?, ?)", (OWNER_ID, "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"))
conn.commit()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
class Form(StatesGroup):
    adding_admin_id = State()
    adding_admin_name = State()
    deleting_admin = State()
    adding_user_name = State()
    adding_user_description = State()
    adding_user_documents = State()
    deleting_user = State()
    searching_user = State()
    chat_session = State()
    adding_user_photo = State()
    editing_user_id = State()  
    editing_user_field = State() 
    editing_user_value = State()  


global_admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ –ß–°"), KeyboardButton(text="üõ†Ô∏è –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")],
        [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –í –ß–°"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –ß–°")],
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton(text="üÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")],
        [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞")],
        [KeyboardButton(text="üìå –î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã")]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ –ß–°"), KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –í –ß–°")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –ß–°"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="üÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")],
        [KeyboardButton(text="üìå –î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã")]
    ],
    resize_keyboard=True
)

user_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton(text="üÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")],
        [KeyboardButton(text="üìå –î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã")]
    ],
    resize_keyboard=True
)

skip_photo_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
    resize_keyboard=True,
    one_time_keyboard=True
)


cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

def is_global_admin(user_id):
    return user_id == OWNER_ID

def is_admin(user_id):
    cursor.execute("SELECT * FROM admins WHERE tg_id = ?", (user_id,))
    return cursor.fetchone() is not None

@dp.message(F.text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
async def add_admin(message: types.Message, state: FSMContext):
    if not is_global_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏.")
    await state.set_state(Form.adding_admin_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")

@dp.message(F.text == "üìå –î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã")
async def show_projects(message: Message):
    if not projects:  
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.")
        return
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, url=link)] for name, link in projects.items()
    ])
    

    markup.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])

    await message.answer("üìå –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏:", reply_markup=markup)

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    role = get_user_role(user_id) 

    if role == "global_admin":
        keyboard = global_admin_kb
    elif role == "admin":
        keyboard = admin_kb
    else:
        keyboard = user_kb

    await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=None)
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await callback.answer() 

@dp.message(Form.adding_admin_id)
async def process_add_admin_id(message: types.Message, state: FSMContext):
    try:
        admin_id = int(message.text)
        await state.update_data(admin_id=admin_id)
        await state.set_state(Form.adding_admin_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")

@dp.message(Form.adding_admin_name)
async def process_add_admin_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute("INSERT OR IGNORE INTO admins (tg_id, name) VALUES (?, ?)", (data['admin_id'], message.text))
    conn.commit()
    await message.answer("‚úÖ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=global_admin_kb)
    await state.clear()

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
@dp.message(F.text == "üõ†Ô∏è –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
async def list_admins(message: types.Message):
    cursor.execute("SELECT tg_id, name FROM admins")
    admins = cursor.fetchall()

    if admins:
        response = "üõ†Ô∏è –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:\n\n" + "\n".join([f"üë§ {name} (ID: {tg_id})" for tg_id, name in admins])
    else:
        response = "‚ùå –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–µ—Ç."

    if is_global_admin(message.from_user.id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_admin")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_admin")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ])
        return await message.answer(response, reply_markup=keyboard)
    
    await message.answer(response)

@dp.message(F.text == "üìú –°–ø–∏—Å–æ–∫ –ß–°")
async def list_blacklist(message: types.Message, state: FSMContext):
    cursor.execute("SELECT id, name, description FROM users")
    users = cursor.fetchall()
    if not users:
        await message.answer("‚ùå –ß–° –ø—É—Å—Ç.")
        return
    await state.update_data(users=users)
    await send_blacklist_page(message, users, 0)

async def send_blacklist_page(message: types.Message, users, page):
    per_page = 5
    start = page * per_page
    end = start + per_page
    page_users = users[start:end]

    response = (
        f"üìú –°–ø–∏—Å–æ–∫ –ß–° (—Å—Ç—Ä. {page + 1})\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        + "\n".join(
            [
                f"üîπ ID: {user[0]}\n"
                f"   üè∑ –ò–º—è: {user[1]}\n"
                f"   üìå –û–ø–∏—Å–∞–Ω–∏–µ: {user[2]}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                for user in page_users
            ]
        )
    )

    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"blacklist_page_{page - 1}"))
    if end < len(users):
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"blacklist_page_{page + 1}"))
    buttons.append(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_user"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer(response, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("blacklist_page_"))
async def blacklist_pagination(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    users = data.get("users", [])
    page = int(callback.data.split("_")[-1])
    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=None)
    await send_blacklist_page(callback.message, users, page)
    await callback.answer()

@dp.callback_query(F.data == "edit_user")
async def edit_user_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.editing_user_id)
    await callback.message.answer("üìå –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

@dp.message(Form.editing_user_id)
async def process_edit_user_id(message: types.Message, state: FSMContext):
    cursor.execute("SELECT name, description FROM users WHERE id = ?", (message.text,))
    user = cursor.fetchone()
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(user_id=message.text)
    buttons = [
        InlineKeyboardButton(text="‚úîÔ∏è –î–∞", callback_data="confirm_edit"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_edit"),
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer(
        f"üîπ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nüè∑ –ò–º—è: {user[0]}\nüìå –û–ø–∏—Å–∞–Ω–∏–µ: {user[1]}\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=keyboard
    )
    await state.set_state(Form.editing_user_field)

@dp.callback_query(F.data == "confirm_edit")
async def confirm_edit(callback: CallbackQuery, state: FSMContext):
    buttons = [
        InlineKeyboardButton(text="üè∑ –ò–º—è", callback_data="edit_name"),
        InlineKeyboardButton(text="üìå –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description"),
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await callback.message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_"))
async def process_edit_user_field(callback: CallbackQuery, state: FSMContext):
    field_map = {"edit_name": "name", "edit_description": "description"}
    field = field_map.get(callback.data)
    if not field:
        await callback.answer()
        return
    await state.update_data(editing_field=field)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await state.set_state(Form.editing_user_value)

@dp.message(Form.editing_user_value)
async def process_edit_user_value_final(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    field = data.get("editing_field")
    cursor.execute(f"UPDATE users SET {field} = ? WHERE id = ?", (message.text, user_id))
    conn.commit()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.clear()

@dp.callback_query(F.data == "add_admin")
async def add_admin_callback(call: CallbackQuery, state: FSMContext):
    await state.set_state(Form.adding_admin_id)
    await call.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    await call.answer()


@dp.callback_query(F.data == "delete_admin")
async def delete_admin_callback(call: CallbackQuery, state: FSMContext):
    await state.set_state(Form.deleting_admin)
    await call.message.answer("üóë –í–≤–µ–¥–∏—Ç–µ Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await call.answer()


@dp.callback_query(F.data == "admin_menu")
async def admin_menu_callback(call: CallbackQuery):
    await call.message.answer("üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=global_admin_kb)
    await call.answer()


@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
async def delete_admin(message: types.Message, state: FSMContext):
    if not is_global_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏.")
    await state.set_state(Form.deleting_admin)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@dp.message(Form.deleting_admin)
async def process_delete_admin(message: types.Message, state: FSMContext):
    try:
        admin_id = int(message.text)
        cursor.execute("DELETE FROM admins WHERE tg_id = ?", (admin_id,))
        conn.commit()
        await message.answer("‚úÖ –º–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω.", reply_markup=global_admin_kb)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if is_global_admin(user_id):
        role = "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        await message.answer("üëë –í—ã –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=global_admin_kb)
    elif is_admin(user_id):
        role = "–ú–µ–Ω–µ–¥–∂–µ—Ä"
        await message.answer("üë§ –í—ã –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=admin_kb)
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–Ø ‚Äî –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤, —Å–∫–∞–º–º–µ—Ä–æ–≤ –∏ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π. üö®\n\n"
            "üîé –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –§–ò–û, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ. üòâ",
            reply_markup=user_kb
        )
    
    cursor.execute("INSERT OR IGNORE INTO botusers (tg_id, username, role) VALUES (?, ?, ?)", (user_id, username, role))
    conn.commit()




@dp.message(F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –í –ß–°")
async def add_user(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await state.set_state(Form.adding_user_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.message(Form.adding_user_name)
async def process_add_user_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.adding_user_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")


@dp.message(Form.adding_user_description)
async def process_add_user_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(Form.adding_user_documents)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")


@dp.message(Form.adding_user_documents)
async def process_add_user_documents(message: types.Message, state: FSMContext):
    await state.update_data(documents=message.text)
    await state.set_state(Form.adding_user_photo)
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üì≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=skip_photo_kb)


@dp.message(Form.adding_user_photo, F.photo)
async def process_add_user_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await save_user_to_db(state, photo_id)
    await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_kb)
    await state.clear()


@dp.message(Form.adding_user_photo, F.text == "üì≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def process_skip_photo(message: types.Message, state: FSMContext):
    await save_user_to_db(state, photo_id=None)
    await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ç–æ.", reply_markup=admin_kb)
    await state.clear()


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_process(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)


async def save_user_to_db(state, photo_id):
    data = await state.get_data()
    cursor.execute(
        "INSERT INTO users (name, description, documents, photo) VALUES (?, ?, ?, ?)",
        (data['name'], data['description'], data['documents'], photo_id)
    )
    conn.commit()



@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –ß–°")
async def delete_user(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]

    if count == 0:
        return await message.answer("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    await state.set_state(Form.deleting_user)
    await message.answer("üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@dp.message(Form.deleting_user)
async def process_delete_user(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

    user_id = int(message.text)
    cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
    conn.commit()

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω.")
    await state.clear()


@dp.message(Form.deleting_user)
async def process_delete_user(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        conn.commit()
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.", reply_markup=admin_kb)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def search_user(message: types.Message, state: FSMContext):
    await state.set_state(Form.searching_user)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID, –∏–º—è –∏–ª–∏ —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")

@dp.message(Form.searching_user)
async def process_search_user(message: types.Message, state: FSMContext):
    query = f"%{message.text}%"
    cursor.execute(
        "SELECT * FROM users WHERE id = ? OR name LIKE ? OR description LIKE ?", 
        (message.text, query, query)
    )
    users = cursor.fetchall()

    if users:
        response = "üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
        response += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        for user in users:
            response += (
                f"üÜî ID:{user[0]}\n"
                f"üìõ –ò–º—è:{user[1]}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user[2]}\n"
                f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã: {user[3]}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )
            if user[4]:  
                await bot.send_photo(message.chat.id, user[4])
        await message.answer(response, parse_mode="HTML")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()

@dp.message(F.text == "üÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")
async def get_user_id(message: types.Message):
    await message.answer(
    f"üåü –í–∞—à Telegram ID: {message.from_user.id}",
    parse_mode="HTML"
)


@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞")
async def list_bot_users(message: types.Message, state: FSMContext):
    if not is_global_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    
    cursor.execute("SELECT tg_id, username, role FROM botusers")
    users = cursor.fetchall()

    if not users:
        return await message.answer("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    await state.update_data(users=users)
    await send_bot_users_page(message, users, 0)


async def send_bot_users_page(message: types.Message, users, page):
    per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start = page * per_page
    end = start + per_page
    page_users = users[start:end]

    response = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ (—Å—Ç—Ä. {page + 1})</b>\n"
    response += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

    for tg_id, username, role in page_users:
        response += (
            f"üÜî ID: <code>{tg_id}</code>\n"
            f"üë§ –ù–∏–∫: @{username if username else '‚Äî'}\n"
            f"üé≠ –†–æ–ª—å: {role}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )

    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"botusers_page_{page - 1}"))
    if end < len(users):
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"botusers_page_{page + 1}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons] if buttons else [])
    
    await message.answer(response, parse_mode="HTML", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("botusers_page_"))
async def bot_users_pagination(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    users = data.get("users", [])
    page = int(callback.data.split("_")[-1])

    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=None)
    await send_bot_users_page(callback.message, users, page)
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


